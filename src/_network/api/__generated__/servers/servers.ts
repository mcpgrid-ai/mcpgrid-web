/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mcpbox API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetServerResponse,
  GetServersParams,
  GetServersResponse
} from '../api.schemas';

import { customInstance } from '../../utils/orval/orval.utils';
import { customQueryOptions } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getServers = (
    params?: GetServersParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetServersResponse>(
      {url: `/api/servers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetServersQueryKey = (params?: GetServersParams,) => {
    return [`/api/servers`, ...(params ? [params]: [])] as const;
    }

    
export const useGetServersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getServers>>, GetServersParams['skip']>, TError = unknown>(params?: GetServersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData, QueryKey, GetServersParams['skip']>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServers>>, QueryKey, GetServersParams['skip']> = ({ signal, pageParam }) => getServers({...params, 'skip': pageParam || params?.['skip']}, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData, QueryKey, GetServersParams['skip']> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getServers>>>
export type GetServersInfiniteQueryError = unknown


export function useGetServersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServers>>, GetServersParams['skip']>, TError = unknown>(
 params: undefined |  GetServersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData, QueryKey, GetServersParams['skip']>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServers>>,
          TError,
          Awaited<ReturnType<typeof getServers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServers>>, GetServersParams['skip']>, TError = unknown>(
 params?: GetServersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData, QueryKey, GetServersParams['skip']>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServers>>,
          TError,
          Awaited<ReturnType<typeof getServers>>, QueryKey
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServers>>, GetServersParams['skip']>, TError = unknown>(
 params?: GetServersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData, QueryKey, GetServersParams['skip']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetServersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServers>>, GetServersParams['skip']>, TError = unknown>(
 params?: GetServersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData, QueryKey, GetServersParams['skip']>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetServersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetServersQueryOptions = <TData = Awaited<ReturnType<typeof getServers>>, TError = unknown>(params?: GetServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServers>>> = ({ signal }) => getServers(params, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServersQueryResult = NonNullable<Awaited<ReturnType<typeof getServers>>>
export type GetServersQueryError = unknown


export function useGetServers<TData = Awaited<ReturnType<typeof getServers>>, TError = unknown>(
 params: undefined |  GetServersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServers>>,
          TError,
          Awaited<ReturnType<typeof getServers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServers<TData = Awaited<ReturnType<typeof getServers>>, TError = unknown>(
 params?: GetServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServers>>,
          TError,
          Awaited<ReturnType<typeof getServers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServers<TData = Awaited<ReturnType<typeof getServers>>, TError = unknown>(
 params?: GetServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetServers<TData = Awaited<ReturnType<typeof getServers>>, TError = unknown>(
 params?: GetServersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetServersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getServer = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetServerResponse>(
      {url: `/api/servers/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetServerQueryKey = (id: string,) => {
    return [`/api/servers/${id}`] as const;
    }

    
export const useGetServerInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getServer>>>, TError = unknown>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServerQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServer>>> = ({ signal }) => getServer(id, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getServer>>>
export type GetServerInfiniteQueryError = unknown


export function useGetServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServer>>>, TError = unknown>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServer>>,
          TError,
          Awaited<ReturnType<typeof getServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServer>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServer>>,
          TError,
          Awaited<ReturnType<typeof getServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServer>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetServerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getServer>>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetServerInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetServerQueryOptions = <TData = Awaited<ReturnType<typeof getServer>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetServerQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getServer>>> = ({ signal }) => getServer(id, requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetServerQueryResult = NonNullable<Awaited<ReturnType<typeof getServer>>>
export type GetServerQueryError = unknown


export function useGetServer<TData = Awaited<ReturnType<typeof getServer>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServer>>,
          TError,
          Awaited<ReturnType<typeof getServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServer<TData = Awaited<ReturnType<typeof getServer>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getServer>>,
          TError,
          Awaited<ReturnType<typeof getServer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetServer<TData = Awaited<ReturnType<typeof getServer>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetServer<TData = Awaited<ReturnType<typeof getServer>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getServer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetServerQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



