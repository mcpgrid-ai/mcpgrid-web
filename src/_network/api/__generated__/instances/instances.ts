/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mcpgrid API
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { customInstance } from '../../utils/orval/orval.utils';
import { customQueryOptions } from '../../utils/orval/orval.utils';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const createInstanceControllerCreateInstance = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/instances`, method: 'POST', signal
    },
      options);
    }
  


export const getCreateInstanceControllerCreateInstanceMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createInstanceControllerCreateInstance>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createInstanceControllerCreateInstance>>, TError,void, TContext> => {

const mutationKey = ['createInstanceControllerCreateInstance'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createInstanceControllerCreateInstance>>, void> = () => {
          

          return  createInstanceControllerCreateInstance(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateInstanceControllerCreateInstanceMutationResult = NonNullable<Awaited<ReturnType<typeof createInstanceControllerCreateInstance>>>
    
    export type CreateInstanceControllerCreateInstanceMutationError = unknown

    export const useCreateInstanceControllerCreateInstance = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createInstanceControllerCreateInstance>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createInstanceControllerCreateInstance>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateInstanceControllerCreateInstanceMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all instances
 */
export const getInstances = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/instances`, method: 'GET', signal
    },
      options);
    }
  

export const getGetInstancesQueryKey = () => {
    return [`/api/instances`] as const;
    }

    
export const useGetInstancesInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getInstances>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInstancesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInstances>>> = ({ signal }) => getInstances(requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInstancesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getInstances>>>
export type GetInstancesInfiniteQueryError = unknown


export function useGetInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInstances>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstances>>,
          TError,
          Awaited<ReturnType<typeof getInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInstances>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstances>>,
          TError,
          Awaited<ReturnType<typeof getInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInstances>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all instances
 */

export function useGetInstancesInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInstances>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetInstancesInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const useGetInstancesQueryOptions = <TData = Awaited<ReturnType<typeof getInstances>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInstancesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInstances>>> = ({ signal }) => getInstances(requestOptions, signal);

      

      const customOptions = customQueryOptions({...queryOptions, queryKey, queryFn});

   return  customOptions as UseQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetInstancesQueryResult = NonNullable<Awaited<ReturnType<typeof getInstances>>>
export type GetInstancesQueryError = unknown


export function useGetInstances<TData = Awaited<ReturnType<typeof getInstances>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstances>>,
          TError,
          Awaited<ReturnType<typeof getInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstances<TData = Awaited<ReturnType<typeof getInstances>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInstances>>,
          TError,
          Awaited<ReturnType<typeof getInstances>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetInstances<TData = Awaited<ReturnType<typeof getInstances>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all instances
 */

export function useGetInstances<TData = Awaited<ReturnType<typeof getInstances>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInstances>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = useGetInstancesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



